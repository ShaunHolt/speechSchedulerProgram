package notemakemenu;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import callenderframing.SchedulerCalPage;
import javaclasses.SettingWallPaper;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import javax.swing.*;
import javax.swing.text.*;
import speechschedulerprogram.DateAndTime;
import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.InputEvent;
import java.io.BufferedReader;
import java.io.FileReader;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.undo.UndoManager;


/**
 *
 * @author surbhit
 * 
 */
    

public class NoteMaker extends javax.swing.JFrame {
    int xx;
    int xy;
    boolean isSaved=false;
    private Document editorPaneDocument;
    public static UndoHandler undoHandler = new UndoHandler();
    public static UndoManager undoManager = new UndoManager();
    public static UndoAction undoAction = null;
    public static RedoAction redoAction = null;
    File selectedFile=null;
    public String savePath="";
    private static NoteMaker obj=null;
    String dict[]=new String[69905];
    String path;
    SettingWallPaper s;
    /**
     * Creates new form NoteMaker
     */
    public NoteMaker()
    {
        initComponents();
        
        KeyStroke undoKeystroke = KeyStroke.getKeyStroke(KeyEvent.VK_Z,InputEvent.CTRL_DOWN_MASK);
        KeyStroke redoKeystroke = KeyStroke.getKeyStroke(KeyEvent.VK_Y, InputEvent.CTRL_DOWN_MASK);

        undoAction = new UndoAction();
        txtPane.getInputMap().put(undoKeystroke, "undoKeystroke");
        txtPane.getActionMap().put("undoKeystroke", undoAction);

        redoAction = new RedoAction();
        txtPane.getInputMap().put(redoKeystroke, "redoKeystroke");
        txtPane.getActionMap().put("redoKeystroke", redoAction);

        editorPaneDocument = txtPane.getDocument();
        editorPaneDocument.addUndoableEditListener(undoHandler);
        
        savePath=System.getProperty("user.home")+"/Documents/DigitalDiary/";
    }
    
    public static NoteMaker getObj(){
        if(obj==null){
            obj=new NoteMaker();
        }
        return obj;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        timeLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtPane = new javax.swing.JEditorPane();
        btnOpenCal = new javax.swing.JButton();
        btnShowTodaysNotes = new javax.swing.JButton();
        btnSetCurrentDate = new javax.swing.JButton();
        lblSelectedDate = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        themeLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        menNew = new javax.swing.JMenuItem();
        menOpen = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        menSav = new javax.swing.JMenuItem();
        menSaveAs = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        menUndo = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        menCut = new javax.swing.JMenuItem();
        menCopy = new javax.swing.JMenuItem();
        menPaste = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        menFind = new javax.swing.JMenuItem();
        menRepl = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        menTimeDate = new javax.swing.JMenuItem();
        formatMenu = new javax.swing.JMenu();
        menFont = new javax.swing.JMenuItem();
        menBold = new javax.swing.JMenuItem();
        menItalics = new javax.swing.JMenuItem();
        menUnderline = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        menuHelp = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(900, 500));
        setMinimumSize(new java.awt.Dimension(900, 500));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(900, 500));
        setResizable(false);
        setSize(new java.awt.Dimension(900, 500));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(0, 54, 900, 20);

        timeLabel.setFont(new java.awt.Font("L M Mono Prop Lt10", 1, 18)); // NOI18N
        timeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        getContentPane().add(timeLabel);
        timeLabel.setBounds(433, 20, 260, 37);

        txtPane.setContentType("text/rtf,\"\""); // NOI18N
        txtPane.setEditorKit(new StyledEditorKit());
        txtPane.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPaneKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(txtPane);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(280, 80, 600, 390);

        btnOpenCal.setText("Open Calendar ");
        btnOpenCal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenCalActionPerformed(evt);
            }
        });
        getContentPane().add(btnOpenCal);
        btnOpenCal.setBounds(40, 20, 160, 23);

        btnShowTodaysNotes.setText("Show Today's Notes");
        btnShowTodaysNotes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowTodaysNotesActionPerformed(evt);
            }
        });
        getContentPane().add(btnShowTodaysNotes);
        btnShowTodaysNotes.setBounds(30, 300, 170, 23);

        btnSetCurrentDate.setText("<html><body>Set date to<br>to Current date</body></html>");
        btnSetCurrentDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetCurrentDateActionPerformed(evt);
            }
        });
        getContentPane().add(btnSetCurrentDate);
        btnSetCurrentDate.setBounds(30, 220, 170, 37);

        lblSelectedDate.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        lblSelectedDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblSelectedDate);
        lblSelectedDate.setBounds(10, 160, 210, 50);

        jButton2.setText("Minimize Frame");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(30, 410, 130, 30);

        jButton1.setText("Close Window");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(30, 360, 130, 30);

        themeLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                themeLabelMouseDragged(evt);
            }
        });
        themeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                themeLabelMousePressed(evt);
            }
        });
        getContentPane().add(themeLabel);
        themeLabel.setBounds(20, 70, 870, 410);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Picturesdownloaded/NewLayer.jpg"))); // NOI18N
        jLabel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLabel1MouseDragged(evt);
            }
        });
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel1MousePressed(evt);
            }
        });
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 940, 500);

        fileMenu.setText("File");

        menNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menNew.setText("New");
        menNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menNewActionPerformed(evt);
            }
        });
        fileMenu.add(menNew);

        menOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menOpen.setText("Open...");
        menOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menOpenActionPerformed(evt);
            }
        });
        fileMenu.add(menOpen);
        fileMenu.add(jSeparator2);

        menSav.setText("Save");
        menSav.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menSavActionPerformed(evt);
            }
        });
        fileMenu.add(menSav);

        menSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menSaveAs.setText("Save As...");
        menSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menSaveAsActionPerformed(evt);
            }
        });
        fileMenu.add(menSaveAs);

        jMenuBar1.add(fileMenu);

        editMenu.setText("Edit");

        menUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        menUndo.setText("Undo");
        menUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menUndoActionPerformed(evt);
            }
        });
        editMenu.add(menUndo);
        editMenu.add(jSeparator3);

        menCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        menCut.setText("Cut");
        menCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menCutActionPerformed(evt);
            }
        });
        editMenu.add(menCut);

        menCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        menCopy.setText("Copy");
        menCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menCopyActionPerformed(evt);
            }
        });
        editMenu.add(menCopy);

        menPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        menPaste.setText("Paste");
        menPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menPasteActionPerformed(evt);
            }
        });
        editMenu.add(menPaste);
        editMenu.add(jSeparator4);

        menFind.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        menFind.setText("Find...");
        menFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menFindActionPerformed(evt);
            }
        });
        editMenu.add(menFind);

        menRepl.setText("Replace");
        menRepl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menReplActionPerformed(evt);
            }
        });
        editMenu.add(menRepl);
        editMenu.add(jSeparator5);

        menTimeDate.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        menTimeDate.setText("Time/Date");
        menTimeDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menTimeDateActionPerformed(evt);
            }
        });
        editMenu.add(menTimeDate);

        jMenuBar1.add(editMenu);

        formatMenu.setText(" Format");

        menFont.setText("Font");
        menFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menFontActionPerformed(evt);
            }
        });
        formatMenu.add(menFont);

        menBold.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        menBold.setText("Bold");
        menBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menBoldActionPerformed(evt);
            }
        });
        formatMenu.add(menBold);

        menItalics.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        menItalics.setText("Italics");
        menItalics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menItalicsActionPerformed(evt);
            }
        });
        formatMenu.add(menItalics);

        menUnderline.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        menUnderline.setText("Underline");
        menUnderline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menUnderlineActionPerformed(evt);
            }
        });
        formatMenu.add(menUnderline);

        jMenuItem1.setText("Change Theme");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        formatMenu.add(jMenuItem1);
        formatMenu.add(jSeparator7);
        formatMenu.add(jSeparator6);

        jMenuBar1.add(formatMenu);

        menuHelp.setText(" Help");
        jMenuBar1.add(menuHelp);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        new DateAndTime();
        menSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menSav.setEnabled(false);
        
        GregorianCalendar gregCal = new GregorianCalendar();
        SchedulerCalPage.selectedDate=gregCal.get(GregorianCalendar.DAY_OF_MONTH);
        SchedulerCalPage.selectedMonth=gregCal.get(GregorianCalendar.MONTH)+1;
        SchedulerCalPage.selectedYear=gregCal.get(GregorianCalendar.YEAR);
        lblSelectedDate.setText(SchedulerCalPage.selectedDate+"-"+SchedulerCalPage.selectedMonth+"-"+SchedulerCalPage.selectedYear);
        try{
            InputStream is=getClass().getResourceAsStream("/wordlist/wordlist.txt");
            InputStreamReader isr =new InputStreamReader(is);
            BufferedReader br = new BufferedReader(isr);
            String s;int i=0;
            while((s=br.readLine())!=null)
            {
                System.out.println(""+s);
                dict[i++]=s;
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }     
    }//GEN-LAST:event_formWindowOpened

    private void menCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menCopyActionPerformed
         txtPane.copy();
    }//GEN-LAST:event_menCopyActionPerformed

    private void menTimeDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menTimeDateActionPerformed
        try
        {
            String ts=new SimpleDateFormat("HH:mm:ss_dd-MM-yyyy").format(Calendar.getInstance().getTime());
            Document d=txtPane.getDocument();
            d.insertString(d.getLength(), "\n\n"+ts, null);
        } 
        catch (Exception ex) 
        {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_menTimeDateActionPerformed

    private void menOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menOpenActionPerformed
       JFileChooser flCh=new JFileChooser(new File(System.getProperty("user.home")+"/Documents/DigitalDiary/"));
       flCh.showOpenDialog(null);
       
        File f=flCh.getSelectedFile(); 
        System.out.println(""+f);
        if(f!=null)
        {
            String fileName=f.getName();
            path=f.getAbsolutePath();
            selectedFile=new File(path);
            String s="";
            try{
                BufferedReader br=new BufferedReader(new FileReader(selectedFile));
                String msg="";
                while((s=br.readLine())!=null)
                {
                    msg=s+"\n";
                }
                br.close();
                txtPane.setText(msg);
            }
            catch(Exception e)
            {
                
            }
        }
    }//GEN-LAST:event_menOpenActionPerformed

    private void menCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menCutActionPerformed
        txtPane.cut();
    }//GEN-LAST:event_menCutActionPerformed

    private void menPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menPasteActionPerformed
        txtPane.paste();
    }//GEN-LAST:event_menPasteActionPerformed

    private void menNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menNewActionPerformed
        if(!isSaved)
        {
            int dialogResult = JOptionPane.showConfirmDialog (null, "Would You Like to Save your current Note First?","Warning",JOptionPane.YES_NO_CANCEL_OPTION);
            switch(dialogResult)
            {
                case 0:
                if(menSav.isEnabled())
                {
                     saveAs();
                }
                else menSaveAs.doClick();
                    menSav.setEnabled(false);
                    menSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
                    menSav.setAccelerator(javax.swing.KeyStroke.getKeyStroke(null));
                txtPane.setText("");
                break;
                
                case 1: // code to open new file without saving
                    txtPane.setText("");
                    menSav.setEnabled(false);
                    menSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
                    menSav.setAccelerator(javax.swing.KeyStroke.getKeyStroke(null));
                    break;
                    
                case 2: break;
                   
            }
             selectedFile=null;
            GregorianCalendar gregCal = new GregorianCalendar();
            SchedulerCalPage.selectedDate=gregCal.get(GregorianCalendar.DAY_OF_MONTH);
            SchedulerCalPage.selectedMonth=gregCal.get(GregorianCalendar.MONTH)+1;
            SchedulerCalPage.selectedYear=gregCal.get(GregorianCalendar.YEAR);
        }
        menSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menSav.setAccelerator(javax.swing.KeyStroke.getKeyStroke(null));
        txtPane.setText("");
        selectedFile=null;
        GregorianCalendar gregCal = new GregorianCalendar();
        SchedulerCalPage.selectedDate=gregCal.get(GregorianCalendar.DAY_OF_MONTH);
        SchedulerCalPage.selectedMonth=gregCal.get(GregorianCalendar.MONTH)+1;
        SchedulerCalPage.selectedYear=gregCal.get(GregorianCalendar.YEAR);
        
        
    }//GEN-LAST:event_menNewActionPerformed

    private void txtPaneKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPaneKeyPressed
        isSaved=false;
        if(!(menSav.isEnabled()))
            menSav.setEnabled(true);
        
        if(evt.getKeyCode()==KeyEvent.VK_SPACE || evt.getKeyCode()==KeyEvent.VK_ENTER || evt.getKeyCode()==KeyEvent.VK_TAB){
            try {
                System.out.println("in keyPressed event");
                Document doc= txtPane.getDocument();
                
               
                
                System.out.println("Everything in white ");
                
                String s=txtPane.getText();
                int flag=0;
                System.out.println(s);
                StringTokenizer st=new StringTokenizer(s, " .,?!-:;|/");
                System.out.println("going to while");
                while(st.hasMoreTokens())
                {
                    String key=st.nextToken();
                    System.out.println("Key = "+ key);
                    System.out.println(""+search(key));
                    if(!search(key))
                    {
                        System.out.println("In if");
                       Document document = doc;
                        try {
                            flag=1;
                            String find = key;
                            for (int index = 0; index + find.length() <= document.getLength(); index++) {
                                System.out.println("index= "+index);
                                String match = document.getText(index, find.length());
                                if (find.equals(match)) {
                                    javax.swing.text.DefaultHighlighter.DefaultHighlightPainter highlightPainter =
                                            new javax.swing.text.DefaultHighlighter.DefaultHighlightPainter(Color.RED);
                                    txtPane.getHighlighter().addHighlight(index, index + find.length(), highlightPainter);
                                    txtPane.setDocument(document);
                                    System.out.println("Wrong word in red");
                                }
                            }
                            System.out.println("out of for");



                        } catch (Exception ex)
                        {
                            ex.printStackTrace();
                        }
                    }
                    else
                        System.out.println("not wrong");
                }
                if(flag==0)
                {

                    Highlighter highlight= txtPane.getHighlighter();
                   
                    highlight.removeAllHighlights();
                   
                }
                System.out.println("Out of while");
            } 
            catch (Exception ex)
            {
               ex.printStackTrace();
            }
        }
        
    }//GEN-LAST:event_txtPaneKeyPressed

    private void menSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menSaveAsActionPerformed
        System.out.println("Save As is Fired");
        saveAs();
    }//GEN-LAST:event_menSaveAsActionPerformed

    private void menSavActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menSavActionPerformed

       OutputStream os=null;
       try
       {
           if(selectedFile!=null)
           {
                String s=txtPane.getText();
                BufferedWriter  br=new BufferedWriter(new FileWriter(selectedFile));
                br.append(s);
                br.close();
                isSaved=true;
           }
           os.close();
       }
       catch(Exception e)
       {
           
       }
    }//GEN-LAST:event_menSavActionPerformed

    private void menUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menUndoActionPerformed
        try {
            Robot robot = new Robot();
            
            robot.keyPress(KeyEvent.VK_CONTROL);
            robot.keyPress(KeyEvent.VK_Z);

            robot.keyRelease(KeyEvent.VK_Z);
            robot.keyRelease(KeyEvent.VK_CONTROL);
        } catch (AWTException ex) {
            Logger.getLogger(NoteMaker.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menUndoActionPerformed

    private void menFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menFindActionPerformed
       FindDialogBox fdb = new FindDialogBox();
       fdb.setVisible(true);
       
    }//GEN-LAST:event_menFindActionPerformed

    private void menItalicsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menItalicsActionPerformed
       Action italicsAction = new StyledEditorKit.ItalicAction();
       italicsAction.actionPerformed(evt);
    }//GEN-LAST:event_menItalicsActionPerformed

    private void menBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menBoldActionPerformed
        Action boldAction = new StyledEditorKit.BoldAction();
        boldAction.actionPerformed(evt);
    }//GEN-LAST:event_menBoldActionPerformed

    private void menUnderlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menUnderlineActionPerformed
        Action underlineAction = new StyledEditorKit.UnderlineAction();
        underlineAction.actionPerformed(evt);
    }//GEN-LAST:event_menUnderlineActionPerformed

    private void menFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menFontActionPerformed
        SelectFont selectFont=new SelectFont();
        selectFont.setVisible(true);
    }//GEN-LAST:event_menFontActionPerformed

    private void btnOpenCalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenCalActionPerformed
       
    }//GEN-LAST:event_btnOpenCalActionPerformed

    private void btnSetCurrentDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetCurrentDateActionPerformed
            GregorianCalendar gregCal = new GregorianCalendar();
            SchedulerCalPage.selectedDate=gregCal.get(GregorianCalendar.DAY_OF_MONTH);
            SchedulerCalPage.selectedMonth=gregCal.get(GregorianCalendar.MONTH)+1;
            SchedulerCalPage.selectedYear=gregCal.get(GregorianCalendar.YEAR);
            
            lblSelectedDate.setText(SchedulerCalPage.selectedDate+"-"+SchedulerCalPage.selectedMonth+"-"+SchedulerCalPage.selectedYear);
    }//GEN-LAST:event_btnSetCurrentDateActionPerformed

    private void btnShowTodaysNotesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowTodaysNotesActionPerformed
       ViewAll.getObj().setVisible(true);
        SettingWallPaper s=new SettingWallPaper();
        if(s.Readwallpaper().equals("wall1")){
        ImageIcon i=new ImageIcon(getClass().getResource("/picturesdownloaded/background3.jpg"));
         ViewAll.jLabel3.setIcon(i);
        }
        else if(s.Readwallpaper().equals("wall2")){
        ImageIcon i=new ImageIcon(getClass().getResource("/picturesdownloaded/background4.jpg"));
      ViewAll.jLabel3.setIcon(i);
        }
         else if(s.Readwallpaper().equals("wall3")){
        ImageIcon i=new ImageIcon(getClass().getResource("/picturesdownloaded/background.jpeg"));
       ViewAll.jLabel3.setIcon(i);
        }
         else if(s.Readwallpaper().equals("wall4")){
         ImageIcon i=new ImageIcon(getClass().getResource("/picturesdownloaded/background2.jpeg"));
       ViewAll.jLabel3.setIcon(i);
        }
         else if(s.Readwallpaper().equals("wall5")){
        ImageIcon i=new ImageIcon(getClass().getResource("/picturesdownloaded/background5.jpg"));
      ViewAll.jLabel3.setIcon(i);
        }
         else if(s.Readwallpaper().equals("wall6")){
        ImageIcon i=new ImageIcon(getClass().getResource("/picturesdownloaded/NewLayer.jpg"));
        ViewAll.jLabel3.setIcon(i);
        }

       
       
    }//GEN-LAST:event_btnShowTodaysNotesActionPerformed

    private void menReplActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menReplActionPerformed
        ReplaceDialogBox.getObj().setVisible(true);
    }//GEN-LAST:event_menReplActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        Theme th = new Theme();
        th.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      this.setState(ICONIFIED);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jLabel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseDragged
       int x=evt.getXOnScreen();
       int y=evt.getYOnScreen();
       this.setLocation(x-xx, y-xy);
    }//GEN-LAST:event_jLabel1MouseDragged

    private void jLabel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MousePressed
      xx=  evt.getX();
      xy=  evt.getY();
    }//GEN-LAST:event_jLabel1MousePressed

    private void themeLabelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_themeLabelMouseDragged
        int x=evt.getXOnScreen();
        int y=evt.getYOnScreen();
        this.setLocation(x-xx,y-xy);
    }//GEN-LAST:event_themeLabelMouseDragged

    private void themeLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_themeLabelMousePressed
        xx=evt.getX();
        xy=evt.getY();
    }//GEN-LAST:event_themeLabelMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NoteMaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NoteMaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NoteMaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NoteMaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NoteMaker().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOpenCal;
    private javax.swing.JButton btnSetCurrentDate;
    private javax.swing.JButton btnShowTodaysNotes;
    public javax.swing.JMenu editMenu;
    public javax.swing.JMenu fileMenu;
    public javax.swing.JMenu formatMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    public static javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    protected static javax.swing.JLabel lblSelectedDate;
    private javax.swing.JMenuItem menBold;
    private javax.swing.JMenuItem menCopy;
    private javax.swing.JMenuItem menCut;
    private javax.swing.JMenuItem menFind;
    private javax.swing.JMenuItem menFont;
    private javax.swing.JMenuItem menItalics;
    private javax.swing.JMenuItem menNew;
    private javax.swing.JMenuItem menOpen;
    private javax.swing.JMenuItem menPaste;
    private javax.swing.JMenuItem menRepl;
    private javax.swing.JMenuItem menSav;
    private javax.swing.JMenuItem menSaveAs;
    private javax.swing.JMenuItem menTimeDate;
    private javax.swing.JMenuItem menUnderline;
    private javax.swing.JMenuItem menUndo;
    public javax.swing.JMenu menuHelp;
    protected static javax.swing.JLabel themeLabel;
    protected static javax.swing.JLabel timeLabel;
    protected static javax.swing.JEditorPane txtPane;
    // End of variables declaration//GEN-END:variables


    void open(){
        JFileChooser fChsr = new JFileChooser();
        fChsr.showOpenDialog(null);
        
        String path=fChsr.getSelectedFile().getAbsolutePath();
        
        // Code to display file in the textPane
    }
    
    boolean search(String key)
    {    // method to search in dictionary lexicographically
       int beg=0,last=69902,mid=0,p=-1;
		while(beg<=last)
		{
			mid=(beg+last)/2;
			if(dict[mid].equalsIgnoreCase(key))
			{
				return true;
			
			}
			if(key.compareToIgnoreCase(dict[mid])>0)
				beg=mid+1;
			else
				last=mid-1;
		}
                return false;
    }
    
    public void saveAs() throws NullPointerException{
        

            
            // Append Date at the end of file name
        String date=getDate();
        try{
        selectedFile=new File(savePath+JOptionPane.showInputDialog("Enter Name :", "Untitled").trim()+"@"+date+".txt");
        System.out.println(""+selectedFile);
        try
        {
        if(selectedFile.exists())
        {
           int response = JOptionPane.showConfirmDialog(this,"The selected file already exists\nDo you want to overwrite ?","Rewrite Existing File", JOptionPane.YES_NO_OPTION);
            System.out.println(""+response);
            if(response==0)
            {
                // Do Nothing...t
            }
            else if(response== 1)
            {
                selectedFile=null;
            }
        }
        
       
       try
       {
           if(selectedFile!=null)
            {
                String s=txtPane.getText();
                BufferedWriter  br=new BufferedWriter(new FileWriter(selectedFile));
                br.append(s);
                br.close();
                isSaved=true;
                
                BufferedWriter b=new BufferedWriter(new FileWriter(savePath+"allNotesLog.dat", true));
                b.append(selectedFile.toString()+"\n");
                b.close();

            }
            
            menSav.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
            
        }
        catch(Exception e)
        {
                
        }
     }
     catch(Exception e)
    {
        
    }
          }catch(Exception e)
          {
              
          }
  }   
    
    
    String getDate()
    {
         int day = SchedulerCalPage.selectedDate;
        int month = SchedulerCalPage.selectedMonth;
        int year = SchedulerCalPage.selectedYear;
        String date=day+"-"+month+"_"+year;
        return date;
    }
}
